<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>李宜衡的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-06-12T14:29:50.650Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>李宜衡</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>test </title>
    <link href="http://yoursite.com/2018/06/12/test/"/>
    <id>http://yoursite.com/2018/06/12/test/</id>
    <published>2018-06-12T14:29:50.000Z</published>
    <updated>2018-06-12T14:29:50.650Z</updated>
    
    <content type="html"><![CDATA[<p>dwq</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;dwq&lt;/p&gt;

      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>test1</title>
    <link href="http://yoursite.com/2018/06/12/test1/"/>
    <id>http://yoursite.com/2018/06/12/test1/</id>
    <published>2018-06-12T14:14:46.000Z</published>
    <updated>2018-06-12T14:22:58.686Z</updated>
    
    <content type="html"><![CDATA[<p>dwd</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;dwd&lt;/p&gt;

      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>tp5的获取器</title>
    <link href="http://yoursite.com/2018/06/03/tp5%E7%9A%84%E8%8E%B7%E5%8F%96%E5%99%A8/"/>
    <id>http://yoursite.com/2018/06/03/tp5的获取器/</id>
    <published>2018-06-03T12:38:18.000Z</published>
    <updated>2018-06-10T12:37:53.346Z</updated>
    
    <content type="html"><![CDATA[<p>thinkphp5中有一个十分好用的方法–获取器，获取器的作用是在获取数据的字段值后自动进行处理。</p><h3 id="零-获取器的格式"><a href="#零-获取器的格式" class="headerlink" title="零.获取器的格式"></a>零.获取器的格式</h3><h5 id="getFieldNameAttr（）"><a href="#getFieldNameAttr（）" class="headerlink" title="getFieldNameAttr（）{}"></a>getFieldNameAttr（）{}</h5><p>只需在对象中定义这种方法，就可以在访问该数据是自动对其转换</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public function getSexAttr($value)</span><br><span class="line">   &#123;</span><br><span class="line">       $status = array(&apos;0&apos;=&gt;&apos;男&apos;,&apos;1&apos;=&gt;&apos;女&apos;);</span><br><span class="line">       $sex = $status[$value];</span><br><span class="line">       if (isset($sex))</span><br><span class="line">       &#123;</span><br><span class="line">           return $sex;</span><br><span class="line">       &#125; else &#123;</span><br><span class="line">           return $status[0];</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>比如这段代码，在访问sex数据时就会自动转换</p><p><img src="\images\pasted-11.png" alt="upload successful"></p><h3 id="一-获取器中的第二个参数"><a href="#一-获取器中的第二个参数" class="headerlink" title="一.获取器中的第二个参数"></a>一.获取器中的第二个参数</h3><p>获取器方法的第二个参数传入的是当前的所有数据数组。</p><p>我们就可以直接使用 status_text 字段的值了，例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$user = User::get(1);</span><br><span class="line">echo $user-&gt;status_text; // 例如输出“正常”</span><br></pre></td></tr></table></figure></p><p>获取器只有当获取某个数据属性的时候自动触发，如果你要获取包含获取器处理<br>的全部数据属性的话，可以使用下面的方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$user = User::get(1);</span><br><span class="line">// 获取全部获取器数据</span><br><span class="line">dump($user-&gt;toArray());</span><br></pre></td></tr></table></figure></p><h3 id="二-获取原始数据"><a href="#二-获取原始数据" class="headerlink" title="二.获取原始数据"></a>二.获取原始数据</h3><p>如果你定义了获取器的情况下，希望获取数据表中的原始数据，可以使用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$user = User::get(1);</span><br><span class="line">// 通过获取器获取字段</span><br><span class="line">echo $user-&gt;status;</span><br><span class="line">// 获取原始字段数据</span><br><span class="line">echo $user-&gt;getData(&apos;status&apos;);</span><br><span class="line">// 获取全部原始数据</span><br><span class="line">dump($user-&gt;getData());</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;thinkphp5中有一个十分好用的方法–获取器，获取器的作用是在获取数据的字段值后自动进行处理。&lt;/p&gt;
&lt;h3 id=&quot;零-获取器的格式&quot;&gt;&lt;a href=&quot;#零-获取器的格式&quot; class=&quot;headerlink&quot; title=&quot;零.获取器的格式&quot;&gt;&lt;/a&gt;零.获取器
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>rest设计原则的总结</title>
    <link href="http://yoursite.com/2018/06/03/4/"/>
    <id>http://yoursite.com/2018/06/03/4/</id>
    <published>2018-06-03T11:45:39.000Z</published>
    <updated>2018-06-09T02:11:13.268Z</updated>
    
    <content type="html"><![CDATA[<h3 id="零-原因"><a href="#零-原因" class="headerlink" title="零.原因"></a>零.原因</h3><p>最近一直在学一个视频教程，视频中的老师介绍了一个rest原则，虽然感觉当时懂了，然后发现没多久就忘了，所以决定写这个来加深一下印象。</p><h3 id="一"><a href="#一" class="headerlink" title="一"></a>一</h3><p>   网络应用程序，分为前端和后端两个部分。当前的发展趋势，就是前端设备层出不穷（手机、平板、桌面电脑、其他专用设备……）。</p><p>因此，必须有一种统一的机制，方便不同的前端设备与后端进行通信。目前主流的标准基本上是两个rest和soap（我了解的）。</p><h5 id="SOAP"><a href="#SOAP" class="headerlink" title="SOAP"></a>SOAP</h5><p>什么是 SOAP，我想不用多说，google 一把满眼都是。其实 SOAP 最早是针对 RPC 的一种解决方案，简单对象访问协议，很轻量，同时作为应用协议可以基于多种传输协议来传递消息（Http,SMTP 等）。但是随着 SOAP 作为 WebService 的广泛应用，不断地增加附加的内容，使得现在开发人员觉得 SOAP 很重，使用门槛很高。在 SOAP 后续的发展过程中，WS-* 一系列协议的制定，增加了 SOAP 的成熟度，也给 SOAP 增加了负担。</p><h5 id="REST"><a href="#REST" class="headerlink" title="REST"></a>REST</h5><p>REST 其实并不是什么协议也不是什么标准，而是将 Http 协议的设计初衷作了诠释，在 Http 协议被广泛利用的今天，越来越多的是将其作为传输协议，而非原先设计者所考虑的应用协议。SOAP 类型的 WebService 就是最好的例子，SOAP 消息完全就是将 Http 协议作为消息承载，以至于对于 Http 协议中的各种参数（例如编码，错误码等）都置之不顾。其实，最轻量级的应用协议就是 Http 协议。Http 协议所抽象的 get,post,put,delete 就好比数据库中最基本的增删改查，而互联网上的各种资源就好比数据库中的记录（可能这么比喻不是很好），对于各种资源的操作最后总是能抽象成为这四种基本操作，在定义了定位资源的规则以后，对于资源的操作通过标准的 Http 协议就可以实现，开发者也会受益于这种轻量级的协议。</p><h3 id="两者的特点"><a href="#两者的特点" class="headerlink" title="两者的特点"></a>两者的特点</h3><p><img src="\images\pasted-8.png" alt="upload successful"><br><img src="\images\pasted-9.png" alt="upload successful"></p><p><img src="\images\pasted-10.png" alt="upload successful"></p><h3 id="三-rest的使用"><a href="#三-rest的使用" class="headerlink" title="三.rest的使用"></a>三.rest的使用</h3><h4 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h4><p>我暂时了解到的使用就是定义路由时用对应的关键字对应相应的功能<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">GET /users - 获取 user 列表</span><br><span class="line">GET /users/12 - 获取指定 ID 为 12 的 user 对象</span><br><span class="line">POST /users - 创建一个新的 user</span><br><span class="line">PUT /users/12 - 更新 id 为 12 的 user</span><br><span class="line">PATCH /users/12 - 对 id 为 12 的 user 进行部分更新</span><br><span class="line">DELETE /users/12 - 删除 id 为 12 的 user</span><br></pre></td></tr></table></figure></p><p>这样更加语义化，看到路由就能大致猜到是什么功能，<br>然后由于rest是基于资源的所以提倡的是前端请求什么就返回什么，不去细分我现在只能意会暂时不知咋说，这种对于团队开发自然不好，但是对外人调用却只能这样，因为你并不知道他到底想要什么，所以对rest的使用应该看情况而定，不要太过死板。</p><h4 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h4><p>rest中异常应该抛出错误码让人们能比较快速的定位到错误的原因，错误码由自己确定，<br>但有一些常见的是约定俗成的，常见的如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">400（错误请求）服务器不理解请求的语法。</span><br><span class="line">401（未授权）请求要求身份验证。对于需要 token 的接口，服务器可能返回此响应。</span><br><span class="line">403（禁止）服务器拒绝请求。对于群组 / 聊天室服务，表示本次调用不符合群组 / 聊天室操作的正确逻辑，例如调用添加成员接口，添加已经在群组里的用户，或者移除聊天室中不存在的成员等操作。</span><br><span class="line">404（未找到）服务器找不到请求的接口。</span><br><span class="line">408（请求超时）服务器等候请求时发生超时。</span><br><span class="line">413（请求体过大）请求体超过了 5kb，拆成更小的请求体重试即可。</span><br><span class="line">415请求体的类型不支持。</span><br><span class="line">429（服务不可用）请求接口超过调用频率限制，即接口被限流。或超过社区版限制，如有需要可联系商务。</span><br><span class="line">500（服务器内部错误）服务器遇到错误，无法完成请求。</span><br><span class="line">501（尚未实施）服务器不具备完成请求的功能。例如，服务器无法识别请求方法时可能会返回此代码。</span><br><span class="line">502（错误网关）服务器作为网关或代理，从上游服务器收到无效响应。</span><br><span class="line">503（服务不可用）请求接口超过调用频率限制，即接口被限流。</span><br><span class="line">504（网关超时）服务器作为网关或代理，但是没有及时从上游服务器收到请求。</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;零-原因&quot;&gt;&lt;a href=&quot;#零-原因&quot; class=&quot;headerlink&quot; title=&quot;零.原因&quot;&gt;&lt;/a&gt;零.原因&lt;/h3&gt;&lt;p&gt;最近一直在学一个视频教程，视频中的老师介绍了一个rest原则，虽然感觉当时懂了，然后发现没多久就忘了，所以决定写这个来加深一
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>安装新版 xampp 后 apache 无法启动提示：Apache Service detected with wrong path 解决方案</title>
    <link href="http://yoursite.com/2018/05/25/3/"/>
    <id>http://yoursite.com/2018/05/25/3/</id>
    <published>2018-05-25T12:46:48.000Z</published>
    <updated>2018-05-25T12:54:41.815Z</updated>
    
    <content type="html"><![CDATA[<p>开始的时候xampp莫名其妙的报端口占用的错误，但是第一次重装软件就解决了<br>最近又遇到了这个错误重装软件后变成了这个错误<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Apache Service detected with wrong path.Change XAMPP Apache and Control Panel settings orUninstall/disable the other service manually first</span><br><span class="line">Found Path: &quot;H:\program files\xampp\apache\bin\httpd.exe&quot; -k runservice</span><br><span class="line">Expected Path: &quot;h:\xampp\apache\bin\httpd.exe&quot; -k runservice</span><br></pre></td></tr></table></figure></p><p>我从网上找到了两种解决方法</p><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><p>还好没有出现端口被占用的情况，这是启动路径出现了错误，Found Path: “H:\program files\xampp\apache\bin\httpd.exe” -k runservice 这个是我以前老版本安装的路径，”h:\xampp\apache\bin\httpd.exe” -k runservice 这个才是我现在安装的路径，如何修改咧？</p><pre><code>首先，检查一下自己的环境变量的 path 中是否还残留以前自己添加的 xampp 路径，如果有就删掉，如果没有就进行下一步。然后就要进入自己的注册表：win+r 打开运行对话框 ---&gt; 输入 regedit 回车，进入注册表 ---&gt; 点击 HKEY_LOCAL_MACHINE----&gt;SYSTEM----&gt;currentControlSet----&gt;Services----&gt; 找到 Apache2.4，你就会在右边款到</code></pre><p>ImagePath 看看那个路径是不是以前那个版本的路径，如果是就选中 ImagePath 点击右键修改，把 xampp 里面提示的 Expected Path 后面的路径粘贴进去，然后确定。</p><pre><code>最后，重启 xampp 就可以了，启动 apache. 如果你的 mysql,filezilla 也出现路径问题，也可以按上面的方法修改。  偶然发现了第二种更加简便的方法，尝试之下有效</code></pre><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><pre><code>解决办法：Just uncheck and check button in Module Services column. It will automatically delete old service and start new service with new path. It happens when you delete xampp folder directly without stopping services.</code></pre><p>即点击 xampp 面板上 mysql 旁边的绿色勾勾，即可重新卸载旧的服务安装新的 mysql 服务。同时最好把 xampp 上的 mysql 配置文件和 xampp 配置文件里的 mysql 端口都改成 3307，以免和原来已经安装的 mysql 服务端口冲突。</p><p>若要重新启用原来安装的 mysql，管理员权限登录 cmd，D:\Program<br> Files\MySQL\MySQL Server 5.5\bin &gt; 下 mysqld.exe –install 就重新安装了服务了</p><p>ps: 修改原来机子的服务的名字可以完美解决 MySQL Service detected with wrong path 的问题，运行 mysqld.exe<br> –install –install MySQLhappy 可以得到名字为 MySQLhappy 的服务名，那样就不会有上述的冲突了</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;开始的时候xampp莫名其妙的报端口占用的错误，但是第一次重装软件就解决了&lt;br&gt;最近又遇到了这个错误重装软件后变成了这个错误&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;sp
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>1对1，多对1，多对多总结</title>
    <link href="http://yoursite.com/2018/05/25/2/"/>
    <id>http://yoursite.com/2018/05/25/2/</id>
    <published>2018-05-25T06:48:59.000Z</published>
    <updated>2018-05-25T12:55:33.027Z</updated>
    
    <content type="html"><![CDATA[<p>thinkPHP5中的数据库的关系基本分为：一对一、多对一、多对多这三种</p><h3 id="一-引例"><a href="#一-引例" class="headerlink" title="一.引例"></a>一.引例</h3><p>1、一对一关系实例</p><ul><li>一个老师对应一个id，一个id对应一个老师  </li></ul><p>2、多对一关系实例   </p><ul><li>一个班级拥有多个学生，一个学生只能够属于某个班级 </li></ul><p>3、多对多实例</p><ul><li>一个学生可以选修多门课程，一个课程可以被多个学生选修</li></ul><h3 id="二-一对一"><a href="#二-一对一" class="headerlink" title="二.一对一"></a>二.一对一</h3><p>一对一的关系下，thinkPHP框架可以直接访问数据库中的数据，像下面一样<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">class TeacherController</span><br><span class="line">&#123;</span><br><span class="line">    public function index()</span><br><span class="line">    &#123;</span><br><span class="line">        $Teacher = new Teacher;</span><br><span class="line">        $teachers = $Teacher-&gt;select();</span><br><span class="line">        var_dump($teachers);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这样可以直接输出teacher的所有信息</p><h3 id="三-多对一"><a href="#三-多对一" class="headerlink" title="三.多对一"></a>三.多对一</h3><p>多对一的关系</p><p><img src="\images\pasted-5.png" alt="upload successful"><br>如上图<br>在thinkPHP5中<br>多个学生对应于一个班级，这种情况下的访问法则为：<br>2、在这个方法中，通过一个id字段来获取这个对象；  </p><p>3、返回这个对象。<br>4，用该对象访问各种数据</p><p>以一个klass类为例子<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> public function Klass()</span><br><span class="line">&#123;</span><br><span class="line">   return $this-&gt;belongsTo(&apos;Klass&apos;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="四-多对多"><a href="#四-多对多" class="headerlink" title="四.多对多"></a>四.多对多</h3><p>多对多的访问比较复杂，需要通过中间表来完成，像这样</p><p><img src="\images\pasted-6.png" alt="upload successful"><br>通过访问中间表来取得班级对应的课程<br>在thinkPHP5中可以自动对中间表进行操作，十分方便<br>但是thinkPHP中同样存在着bug<br>BUG1：<br>在Course中关联Klass，如果不加任何设置（直接将代码写为：return $this-&gt;belongsToMany(‘Klass’);），thinkphp 会尝试找course_klass这张表；而在Klass中关联Course，那么 thinkphp 则会尝试找klass_course这张表。显然，中间表只能有一个名字。这就使得我们在使用多对多关联时，还需要设置中间表的名字。</p><p>BUG2：<br>当我们传入表名时，thinkphp 没有自动为我们加入表前缀。这使得我们需要手动的进行配置，但显然我更希望默认是自动加入表前缀的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;thinkPHP5中的数据库的关系基本分为：一对一、多对一、多对多这三种&lt;/p&gt;
&lt;h3 id=&quot;一-引例&quot;&gt;&lt;a href=&quot;#一-引例&quot; class=&quot;headerlink&quot; title=&quot;一.引例&quot;&gt;&lt;/a&gt;一.引例&lt;/h3&gt;&lt;p&gt;1、一对一关系实例&lt;/p&gt;
&lt;ul&gt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>记录一次安装xdebug</title>
    <link href="http://yoursite.com/2018/05/19/1/"/>
    <id>http://yoursite.com/2018/05/19/1/</id>
    <published>2018-05-19T06:55:00.000Z</published>
    <updated>2018-05-19T08:32:38.789Z</updated>
    
    <content type="html"><![CDATA[<h3 id="起因："><a href="#起因：" class="headerlink" title="起因："></a>起因：</h3><p>为了更简单的分析错误，于是打算装一个xdebug的插件，于是从网上找了一个教程就开始装。</p><h3 id="安装过程"><a href="#安装过程" class="headerlink" title="安装过程"></a>安装过程</h3><p>首先来到<a href="https://xdebug.org/wizard.php" target="_blank" rel="noopener">这个网站</a><br>在空白框里输入了输入了phpinfo得到的相关信息：<br><img src="\images\pasted-0.png" alt="网站图片"><br>(由于PHP5那个xampp不知为何无法启动所以用php7这张代替)<br><img src="\images\1.png" alt="提示信息"><br>可见得到的信息中并没有教程和学长所说的推荐版本和安装步骤<br>开始也没仔细看下面的提示所以以为是按照版本号去这里面找<br><img src="\images\pasted-1.png" alt="upload successful"><br>经过多次尝试，仍未成功，然后决定找学长帮忙</p><p>再次进入那个网站输入信息后发现下面有提示：php7.0以下的已经不给版本和步骤了<br>（xampp无法启动，所以此处不配图）</p><p>经过多次尝试无果，所以决定讲php升级的7</p><p><img src="\images\pasted-2.png" alt="upload successful"></p><p>按照提示顺利安装</p><p><img src="\images\pasted-3.png" alt="upload successful">  </p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p> 在接触新的东西时，要注意观察，不要忽略了重要的信息，同时也应该尽快让自己改掉不喜欢看英文提示的坏毛病，总觉得英文麻烦，实际上大部分的英文还是比较简单的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;起因：&quot;&gt;&lt;a href=&quot;#起因：&quot; class=&quot;headerlink&quot; title=&quot;起因：&quot;&gt;&lt;/a&gt;起因：&lt;/h3&gt;&lt;p&gt;为了更简单的分析错误，于是打算装一个xdebug的插件，于是从网上找了一个教程就开始装。&lt;/p&gt;
&lt;h3 id=&quot;安装过程&quot;&gt;&lt;a 
      
    
    </summary>
    
    
      <category term="PHP" scheme="http://yoursite.com/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2018/05/19/hello-world/"/>
    <id>http://yoursite.com/2018/05/19/hello-world/</id>
    <published>2018-05-19T03:22:00.000Z</published>
    <updated>2018-06-12T14:37:41.009Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check     <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check     &lt;a href=&quot;https://h
      
    
    </summary>
    
    
  </entry>
  
</feed>
